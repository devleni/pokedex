{"version":3,"sources":["Pokecard.js","PokecardList.js","SearchBox.js","pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","props","id","name","description","className","src","alt","PokecardList","pokemon","map","singlePokemon","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredPokemon","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAaeA,EAXE,SAACC,GAAW,IACnBC,EAA0BD,EAA1BC,GAAIC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,YAClB,OACE,yBAAKC,UAAU,wEACb,yBAAKC,IAAG,mFAA8EJ,EAA9E,QAAwFK,IAAI,YACpG,gCAAML,EAAN,IAAWC,GACX,2BAAIC,KCcKI,EAnBM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,6BAEIA,EAAUA,EAAQC,KAAI,SAACC,EAAeC,GACpC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIO,EAAQG,GAAGV,GACfC,KAAMM,EAAQG,GAAGT,KACjBC,YAAaK,EAAQG,GAAGR,mBCHvBU,EARG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BAAOA,UAAU,yCAAyCY,KAAK,SAASC,YAAY,oBAAiBC,SAAUH,MCLxGP,EAAU,CACrB,CAACP,GAAI,EAAGC,KAAM,YAAaC,YAAa,6FACxC,CAACF,GAAI,EAAGC,KAAM,UAAWC,YAAa,uGACtC,CAACF,GAAI,EAAGC,KAAM,WAAYC,YAAa,mGACvC,CAACF,GAAI,EAAGC,KAAM,aAAcC,YAAa,mGACzC,CAACF,GAAI,EAAGC,KAAM,aAAcC,YAAa,8FACzC,CAACF,GAAI,EAAGC,KAAM,YAAaC,YAAa,qFACxC,CAACF,GAAI,EAAGC,KAAM,WAAYC,YAAa,gGACvC,CAACF,GAAI,EAAGC,KAAM,YAAaC,YAAa,wFACxC,CAACF,GAAI,EAAGC,KAAM,YAAaC,YAAa,oGCyB3BgB,G,kBA3Bb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACXjB,QAASA,EACTM,YAAa,IAJH,E,sEAYJ,IAAD,OACDY,EAAkBC,KAAKF,MAAMjB,QAAQoB,QAAO,SAAApB,GAChD,OAAOA,EAAQN,KAAK2B,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAEpE,OACE,yBAAKzB,UAAU,MACf,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAWW,aAAcY,KAAKP,iBAC9B,kBAAC,EAAD,CAAcZ,QAASkB,IACvB,+D,GAtBYK,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d8019b47.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Pokecard = (props) => {\r\n  const { id, name, description } = props;\r\n  return (\r\n    <div className=\"measure-narrow tc bg-lightest-blue dib br4 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} alt=\"pokemon\"/>\r\n      <h2>#{id} {name}</h2>\r\n      <p>{description}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pokecard","import React from \"react\";\r\nimport Pokecard from \"./Pokecard\";\r\n\r\nconst PokecardList = ({ pokemon }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        pokemon = pokemon.map((singlePokemon, i) => {\r\n          return (\r\n            <Pokecard\r\n              key={i}\r\n              id={pokemon[i].id}\r\n              name={pokemon[i].name}\r\n              description={pokemon[i].description}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokecardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input className=\"pa3 br2 b--light-blue bg-lightest-blue\" type=\"search\" placeholder=\"Search Pokémon\" onChange={searchChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;","export const pokemon = [\r\n  {id: 1, name: \"Bulbasaur\", description: \"For some time after its birth, it grows by gaining nourishment from the seed on its back.\"},\r\n  {id: 2, name: \"Ivysaur\", description: \"When the bud on its back starts swelling, a sweet aroma wafts to indicate the flowers coming bloom.\"},\r\n  {id: 3, name: \"Venusaur\", description: \"After a rainy day, the flower on its back smells stronger. The scent attracts other Pokémon.\"},\r\n  {id: 4, name: \"Charmander\", description: \"The fire on the tip of its tail is a measure of its life. If healthy, its tail burns intensely.\"},\r\n  {id: 5, name: \"Charmeleon\", description: \"In the rocky mountains where Charmeleon live, their fiery tails shine at night like stars.\"},\r\n  {id: 6, name: \"Charizard\", description: \"It is said that Charizards fire burns hotter if it has experienced harsh battles.\"},\r\n  {id: 7, name: \"Squirtle\", description: \"It shelters itself in its shell then strikes back with spouts of water at every opportunity.\"},\r\n  {id: 8, name: \"Wartortle\", description: \"It is said to live 10,000 years. Its furry tail is popular as a symbol of longevity.\"},\r\n  {id: 9, name: \"Blastoise\", description: \"The jets of water it spouts from the rocket cannons on its shell can punch through thick steel.\"},\r\n  // \"Caterpie\",\r\n  // \"Metapod\",\r\n  // \"Butterfree\",\r\n  // \"Weedle\",\r\n  // \"Kakuna\",\r\n  // \"Beedrill\",\r\n  // \"Pidgey\",\r\n  // \"Pidgeotto\",\r\n  // \"Pidgeot\",\r\n  // \"Rattata\",\r\n  // \"Raticate\",\r\n  // \"Spearow\",\r\n  // \"Fearow\",\r\n  // \"Ekans\",\r\n  // \"Arbok\",\r\n  // \"Pikachu\",\r\n  // \"Raichu\",\r\n  // \"Sandshrew\",\r\n  // \"Sandslash\",\r\n  // \"Nidoran♀\",\r\n  // \"Nidorina\",\r\n  // \"Nidoqueen\",\r\n  // \"Nidoran♂\",\r\n  // \"Nidorino\",\r\n  // \"Nidoking\",\r\n  // \"Clefairy\",\r\n  // \"Clefable\",\r\n  // \"Vulpix\",\r\n  // \"Ninetales\",\r\n  // \"Jigglypuff\",\r\n  // \"Wigglytuff\",\r\n  // \"Zubat\",\r\n  // \"Golbat\",\r\n  // \"Oddish\",\r\n  // \"Gloom\",\r\n  // \"Vileplume\",\r\n  // \"Paras\",\r\n  // \"Parasect\",\r\n  // \"Venonat\",\r\n  // \"Venomoth\",\r\n  // \"Diglett\",\r\n  // \"Dugtrio\",\r\n  // \"Meowth\",\r\n  // \"Persian\",\r\n  // \"Psyduck\",\r\n  // \"Golduck\",\r\n  // \"Mankey\",\r\n  // \"Primeape\",\r\n  // \"Growlithe\",\r\n  // \"Arcanine\",\r\n  // \"Poliwag\",\r\n  // \"Poliwhirl\",\r\n  // \"Poliwrath\",\r\n  // \"Abra\",\r\n  // \"Kadabra\",\r\n  // \"Alakazam\",\r\n  // \"Machop\",\r\n  // \"Machoke\",\r\n  // \"Machamp\",\r\n  // \"Bellsprout\",\r\n  // \"Weepinbell\",\r\n  // \"Victreebel\",\r\n  // \"Tentacool\",\r\n  // \"Tentacruel\",\r\n  // \"Geodude\",\r\n  // \"Graveler\",\r\n  // \"Golem\",\r\n  // \"Ponyta\",\r\n  // \"Rapidash\",\r\n  // \"Slowpoke\",\r\n  // \"Slowbro\",\r\n  // \"Magnemite\",\r\n  // \"Magneton\",\r\n  // \"Farfetch’d\",\r\n  // \"Doduo\",\r\n  // \"Dodrio\",\r\n  // \"Seel\",\r\n  // \"Dewgong\",\r\n  // \"Grimer\",\r\n  // \"Muk\",\r\n  // \"Shellder\",\r\n  // \"Cloyster\",\r\n  // \"Gastly\",\r\n  // \"Haunter\",\r\n  // \"Gengar\",\r\n  // \"Onix\",\r\n  // \"Drowzee\",\r\n  // \"Hypno\",\r\n  // \"Krabby\",\r\n  // \"Kingler\",\r\n  // \"Voltorb\",\r\n  // \"Electrode\",\r\n  // \"Exeggcute\",\r\n  // \"Exeggutor\",\r\n  // \"Cubone\",\r\n  // \"Marowak\",\r\n  // \"Hitmonlee\",\r\n  // \"Hitmonchan\",\r\n  // \"Lickitung\",\r\n  // \"Koffing\",\r\n  // \"Weezing\",\r\n  // \"Rhyhorn\",\r\n  // \"Rhydon\",\r\n  // \"Chansey\",\r\n  // \"Tangela\",\r\n  // \"Kangaskhan\",\r\n  // \"Horsea\",\r\n  // \"Seadra\",\r\n  // \"Goldeen\",\r\n  // \"Seaking\",\r\n  // \"Staryu\",\r\n  // \"Starmie\",\r\n  // \"Mr. Mime\",\r\n  // \"Scyther\",\r\n  // \"Jynx\",\r\n  // \"Electabuzz\",\r\n  // \"Magmar\",\r\n  // \"Pinsir\",\r\n  // \"Tauros\",\r\n  // \"Magikarp\",\r\n  // \"Gyarados\",\r\n  // \"Lapras\",\r\n  // \"Ditto\",\r\n  // \"Eevee\",\r\n  // \"Vaporeon\",\r\n  // \"Jolteon\",\r\n  // \"Flareon\",\r\n  // \"Porygon\",\r\n  // \"Omanyte\",\r\n  // \"Omastar\",\r\n  // \"Kabuto\",\r\n  // \"Kabutops\",\r\n  // \"Aerodactyl\",\r\n  // \"Snorlax\",\r\n  // \"Articuno\",\r\n  // \"Zapdos\",\r\n  // \"Moltres\",\r\n  // \"Dratini\",\r\n  // \"Dragonair\",\r\n  // \"Dragonite\",\r\n  // \"Mewtwo\",\r\n  // \"Mew\"\r\n]","import React, { Component } from \"react\";\r\nimport PokecardList from \"./PokecardList\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { pokemon } from \"./pokemon\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pokemon: pokemon,\r\n      searchfield: \"\"\r\n    }\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const filteredPokemon = this.state.pokemon.filter(pokemon => {\r\n      return pokemon.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    return (\r\n      <div className=\"tc\">\r\n      <h1 className=\"f1\">POKEDEX</h1>\r\n      <SearchBox searchChange={this.onSearchChange} />\r\n      <PokecardList pokemon={filteredPokemon} />\r\n      <p>More Pokémon coming soon</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./App\";\r\nimport \"tachyons\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}